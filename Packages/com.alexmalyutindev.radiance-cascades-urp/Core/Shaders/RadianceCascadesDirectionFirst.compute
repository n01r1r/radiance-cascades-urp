#pragma kernel RenderAndMergeCascade
#pragma kernel CombineSH

#include "Packages/com.unity.render-pipelines.core/ShaderLibrary/Common.hlsl"
#include "Packages/com.unity.render-pipelines.core/ShaderLibrary/SphericalHarmonics.hlsl"
#include "Common.hlsl"

// #define SIMPLE_RAYCASTING

// #define SIMPLE_RAYCASTING

// Input
float _RayScale;
int _CascadeLevel;
float2 _ProbesCount;
float2 _VarianceDepthSize;
int _ImprovedCascadeBlending;
int _OptimizedDepthSampling;
int _EnableAdaptiveRayScale;
float _CascadeScaleFactor;
float _VarianceInfluence;
float _DepthRangeInfluence;

Texture2D<float2> _MinMaxDepth;
Texture2D<float> _SmoothedDepth;
Texture2D<float2> _VarianceDepth;
Texture2D<float4> _BlurredColor;

/////////////
// Outputs //
/////////////

// Cascade Layout:
// Columns - longitudinal rays
// Rows - latitudinal rays
//            min probes                      max probes
// ._______________________________v_______________________________.
// |   ↗   |   ↖   |   ↙   |   ↘   |   ↗   |   ↖   |   ↙   |   ↘   |
// |_______|_______|_______|_______|_______|_______|_______|_______|
// |   ↗   |   ↖   |   ↙   |   ↘   |   ↗   |   ↖   |   ↙   |   ↘   |
// |_______|_______|_______|_______|_______|_______|_______|_______|
// |   ↗   |   ↖   |   ↙   |   ↘   |   ↗   |   ↖   |   ↙   |   ↘   |
// |_______|_______|_______|_______|_______|_______|_______|_______|
// |   ↗   |   ↖   |   ↙   |   ↘   |   ↗   |   ↖   |   ↙   |   ↘   |
// |_______|_______|_______|_______|_______|_______|_______|_______|
// |_↗_|_↑_|_↖_|_←_|_↙_|_↓_|_↘_|_↗_|_↗_|_↑_|_↖_|_←_|_↙_|_↓_|_↘_|_↗_|
// |_↗_|_↑_|_↖_|_←_|_↙_|_↓_|_↘_|_↗_|_↗_|_↑_|_↖_|_←_|_↙_|_↓_|_↘_|_↗_|
// |_↗_|_↑_|_↖_|_←_|_↙_|_↓_|_↘_|_↗_|_↗_|_↑_|_↖_|_←_|_↙_|_↓_|_↘_|_↗_|
// |_↗_|_↑_|_↖_|_←_|_↙_|_↓_|_↘_|_↗_|_↗_|_↑_|_↖_|_←_|_↙_|_↓_|_↘_|_↗_|
RWTexture2D<float4> _RadianceCascades;

// Output
// ._____________.
// | SH0  | SH1x |
// |______|______|
// | SH1y | SH1z |
// |______|______|
RWTexture2D<float4> _RadianceSH;

static const int2 Ranges2[6] =
{
    int2(0, 1),
    int2(1, 2),
    int2(2, 4),
    int2(4, 8),
    int2(8, 16),
    int2(16, 32),
};

static const int2 Ranges4[6] =
{
    int2(0, 1),
    int2(1, 4),
    int2(4, 16),
    int2(16, 64),
    int2(64, 256),
    int2(256, 1024),
};

float3 TransformWorldToScreenSpace(float3 positionWS)
{
    float4 positionCS = TransformWorldToHClip(positionWS);
    positionCS.xyz /= positionCS.w;
    positionCS.xy = mad(positionCS.xy, float2(0.5f, -0.5f), float2(0.5f, 0.5f));
    return positionCS.xyz;
}

inline float3 TransformViewToScreenUV(float3 positionVS)
{
    float4 positionCS = mul(_ViewToHClip, float4(positionVS, 1));
    positionCS.xyz /= positionCS.w;
    positionCS.xy = mad(positionCS.xy, float2(0.5f, 0.5f), float2(0.5f, 0.5f));
    return positionCS.xyz;
}

float GetAdaptiveRayScale(int cascadeLevel, float2 probeUV, float baseRayScale)
{
    if (!_EnableAdaptiveRayScale)
        return baseRayScale;
    
    // Base cascade scaling
    float cascadeScale = lerp(0.5f, 2.0f, cascadeLevel / 5.0f);
    
    // Variance adjustment
    float variance = SAMPLE_TEXTURE2D_LOD(_VarianceDepth, sampler_LinearClamp, probeUV, cascadeLevel + 2).x;
    float varianceScale = lerp(1.0f + _VarianceInfluence, 1.0f - _VarianceInfluence, saturate(variance * 2.0f));
    
    // Depth range adjustment (NEW)
    float2 minMaxDepth = LOAD_TEXTURE2D_LOD(_MinMaxDepth, probeUV * _ProbesCount, cascadeLevel + 2).xy;
    float2 minMaxLinear = LinearEyeDepth(minMaxDepth, _ZBufferParams);
    float depthRange = minMaxLinear.y - minMaxLinear.x;
    float depthScale = lerp(1.0f, 1.5f, saturate(depthRange / 50.0f) * _DepthRangeInfluence);
    
    return baseRayScale * cascadeScale * varianceScale * depthScale * _CascadeScaleFactor;
}

float4 GetRadianceWeighted(int2 coords, float4 weights)
{
    float4 a = _RadianceCascades[coords];
    float4 b = _RadianceCascades[coords + int2(1, 0)];
    float4 c = _RadianceCascades[coords + int2(0, 1)];
    float4 d = _RadianceCascades[coords + int2(1, 1)];
    return a * weights.x
        + b * weights.y
        + c * weights.z
        + d * weights.w;
}

float4x4 LoadUpperCascadesBilinear(int2 coords, float4 weights)
{
    float4 a = _RadianceCascades[coords];
    float4 b = _RadianceCascades[coords + int2(1, 0)];
    float4 c = _RadianceCascades[coords + int2(0, 1)];
    float4 d = _RadianceCascades[coords + int2(1, 1)];
    return float4x4(
        a * weights.x,
        b * weights.y,
        c * weights.z,
        d * weights.w
    );
}

float2x4 LoadUpperRadianceBilateral(int2 coords, float2 lowerProbeDepth)
{
    const int2 upperCascadeSize = _ProbesCount * 0.5f;

    int2 lowerProbeId = coords % _ProbesCount;
    // | c | d |
    // |___|___|
    // |[a]| b |
    // |___|___|
    int2 upperProbeLocalId = clamp(floor((lowerProbeId - 1) * 0.5f), 0, upperCascadeSize - 2);

    float2 bilinearWeights = saturate(fmod((lowerProbeId - 1) * 0.5f, 1.0f) + 0.25f);
    float4 weights = float4(bilinearWeights, 1.0f - bilinearWeights);
    weights = float4(
        weights.z * weights.w,
        weights.x * weights.w,
        weights.z * weights.y,
        weights.x * weights.y
    );

    // 02----12----22----32----42----42
    // | D01 |     | E11 |     | F21 |
    // 02----12----22----32----42----42
    // |     |     |     |     |     |
    // 01----11----21----31----41----41
    // | A00 |     | B10 |     | C20 |
    // 00----10----20----30----40----40
    int2 upperCascadeCoords = floor(coords * 0.5f);
    upperCascadeCoords = floor(upperCascadeCoords / float2(upperCascadeSize)) * upperCascadeSize;
    upperCascadeCoords.x *= 2;
    upperCascadeCoords += upperProbeLocalId;
    upperCascadeCoords.y += upperCascadeSize.y * 4;

    // NOTE: Chebyshev Variance
    float2 uv = float2(lowerProbeId) / float2(_ProbesCount);
    float2 depthMoments = SAMPLE_TEXTURE2D_LOD(_VarianceDepth, sampler_PointClamp, uv, 0).rg;
    float smoothedDepth = depthMoments.x + sqrt(max(0.0, depthMoments.y - depthMoments.x * depthMoments.x));

    int depthLevel = _CascadeLevel + 3;
    static const int2 neighbours[4] = {int2(0, 0), int2(1, 0), int2(0, 1), int2(1, 1)};
    float2 weightedMinMaxDepth = 0.0f;
    for (int i = 0; i < 4; i++)
    {
        float2 minMaxDepth = LOAD_TEXTURE2D_LOD(_MinMaxDepth, upperProbeLocalId + neighbours[i], depthLevel);
        weightedMinMaxDepth += minMaxDepth * weights[i];
    }
    weightedMinMaxDepth = LinearEyeDepth(weightedMinMaxDepth, _ZBufferParams);
    float depthThickness = max(weightedMinMaxDepth.x - weightedMinMaxDepth.y, 0.0001f);

    float minProbeWeight = saturate((weightedMinMaxDepth[0] - lowerProbeDepth[0]) / depthThickness);
    float maxProbeWeight = saturate((weightedMinMaxDepth[0] - lowerProbeDepth[1]) / depthThickness);

    float2x4 radiance = 0.0f;

    int2 offset = int2(upperCascadeSize.x, 0);
    int halfCascadeBufferSizeX = floor(_CascadeBufferSize.x / 2);
    int2 neighbourRaysOffset[4] = {
        -offset + int2(halfCascadeBufferSizeX, 0) * (upperCascadeCoords.x < offset.x),
        int2(0, 0),
        offset,
        2 * offset - int2(halfCascadeBufferSizeX, 0) * (upperCascadeCoords.x + offset.x > halfCascadeBufferSizeX),
    };

    float4 minProbeRadiance = 0.0f;
    float4 maxProbeRadiance = 0.0f;
    for (int rayI = 0; rayI < 4; rayI++)
    {
        int2 off = neighbourRaysOffset[rayI];
        minProbeRadiance += GetRadianceWeighted(upperCascadeCoords + off, weights);
        maxProbeRadiance += GetRadianceWeighted(upperCascadeCoords + off + int2(halfCascadeBufferSizeX, 0), weights);
    }
    radiance[0] = lerp(minProbeRadiance, maxProbeRadiance, minProbeWeight);
    radiance[1] = lerp(minProbeRadiance, maxProbeRadiance, maxProbeWeight);

    return radiance;
}

float4 TraceRay(float3 rayOriginVS, float3 rayEndVS, int stepsCount, int2 range)
{
    float4 radiance = float4(0.0f, 0.0f, 0.0f, 1.0f);
    UNITY_LOOP
    for (int i = 0; i < stepsCount; i++)
    {
        float traveledDistance = i / (stepsCount - 1.0f);
        // TODO: Use DDA for ray marching.
        float3 rayVS = lerp(rayOriginVS, rayEndVS, traveledDistance);
        float3 ray = TransformViewToScreenUV(rayVS);
        if (any(ray.xy < 0 || 1 < ray.xy))
        {
            break;
        }

        float rayDepth = -rayVS.z;

        float2 depthMoments = SAMPLE_TEXTURE2D_LOD(_VarianceDepth, sampler_LinearClamp, ray.xy, 0);
        float linearDepth = depthMoments.x + sqrt(max(0.0f, depthMoments.y - depthMoments.x * depthMoments.x));

        float4 lighting = SAMPLE_TEXTURE2D_LOD(
            _BlurredColor,
            sampler_LinearClamp,
            ray.xy,
            _CascadeLevel
        );

        float depthFade = saturate(1.0f / (1.0f + (linearDepth - rayDepth) * (linearDepth - rayDepth)));
        float distanceFade = 1.0f / (1.0f + (range.x + (range.y - range.x) * traveledDistance) * _RayScale);

        bool test = linearDepth < rayDepth && linearDepth + 3.0f > rayDepth;
        if (test)
        {
            radiance.rgb = lighting.rgb * depthFade;
            radiance.a = 0.0f;
            break;
        }
    }

    return radiance;
}

float4 TraceDepthRays(float3 rayOriginVS, float3 rayEndVS, int stepsCount, int2 range)
{
    float4 radiance = float4(0.0f, 0.0f, 0.0f, 1.0f);
    
    float4x4 r[4] =
    {
        float4x4(
            float4(0.0f, 0.0f, 0.0f, 1.0f),
            float4(0.0f, 0.0f, 0.0f, 1.0f),
            float4(0.0f, 0.0f, 0.0f, 1.0f),
            float4(0.0f, 0.0f, 0.0f, 1.0f)
        ),
        float4x4(
            float4(0.0f, 0.0f, 0.0f, 1.0f),
            float4(0.0f, 0.0f, 0.0f, 1.0f),
            float4(0.0f, 0.0f, 0.0f, 1.0f),
            float4(0.0f, 0.0f, 0.0f, 1.0f)
        ),
        float4x4(
            float4(0.0f, 0.0f, 0.0f, 1.0f),
            float4(0.0f, 0.0f, 0.0f, 1.0f),
            float4(0.0f, 0.0f, 0.0f, 1.0f),
            float4(0.0f, 0.0f, 0.0f, 1.0f)
        ),
        float4x4(
            float4(0.0f, 0.0f, 0.0f, 1.0f),
            float4(0.0f, 0.0f, 0.0f, 1.0f),
            float4(0.0f, 0.0f, 0.0f, 1.0f),
            float4(0.0f, 0.0f, 0.0f, 1.0f)
        ),
    };

    float4x4 depthRays = 0.0f;
    for (int i = 0; i < 4; i++)
    {
        float4 dr;
        for (int j = 0; j < 4; j++) dr[j] = ((i * 4 + j) / 15.0f - 0.5f) * 2.0f;
        depthRays[i] = dr;
    }

    UNITY_LOOP
    for (int i = 0; i < stepsCount; i++)
    {
        float traveledDistance = i / (stepsCount - 1.0f);
        // TODO: Use DDA for ray marching.
        float3 rayVS = lerp(rayOriginVS, rayEndVS, traveledDistance);
        float3 ray = TransformViewToScreenUV(rayVS);
        
        bool isOffScreen = any(ray.xy < 0 || 1 < ray.xy);
        float4 lighting;

        if (isOffScreen)
        {
            break;  // Simple off-screen handling
        }
        else
        {
            // Normal on-screen sampling
            lighting = SAMPLE_TEXTURE2D_LOD(_BlurredColor, sampler_LinearClamp, ray.xy, _CascadeLevel + 1);
        }

        float2 depthMoments = SAMPLE_TEXTURE2D_LOD(_VarianceDepth, sampler_LinearClamp, ray.xy, 0);

        float rayDepth = -rayVS.z;
        float linearDepth = depthMoments.x + sqrt(max(0.0f, depthMoments.y - depthMoments.x * depthMoments.x));
        float4x4 transmittance = (rayDepth - linearDepth) + depthRays * i * _RayScale;

        for (int depthRay = 0; depthRay < 16; depthRay++)
        {
            float4 r0 = r[depthRay / 4][depthRay % 4];
            float trans = transmittance[depthRay / 4][depthRay % 4];
            r0.rgb += lighting.rgb * r0.w * saturate(1.0f - trans) * saturate(trans);
            r0.w *= saturate(1.0f - trans);
            r[depthRay / 4][depthRay % 4] = r0;
        }
    }

    for (int depthRay = 0; depthRay < 4; depthRay++)
    {
        radiance += mul(float4(1.0f, 1.0f, 1.0f, 1.0f) / 16.0f, r[depthRay]);
    }
    
    return radiance;
}

[numthreads(8, 4, 1)]
void RenderAndMergeCascade(uint3 id : SV_DispatchThreadID)
{
    int2 coords = int2(id.xy);
    int2 targetCoords = int2(id.xy);
    targetCoords.y += _ProbesCount.y * 4;

    if (coords.x * 2 >= _CascadeBufferSize.x || coords.y >= _ProbesCount.y * 4)
    {
        return;
    }

    // BUG: Fix probe probeCenterUV?
    int2 probeCenterCoord = coords % _ProbesCount;
    float2 probeCenterUV = float2(probeCenterCoord + 1.0f) / (_ProbesCount + 1.0f);

    const float cascadeLevel = _CascadeLevel;
    const int depthLevel = _CascadeLevel + 2;

    float3 directionVS;
    {
        // TODO: Fix hardcoded values.
        float cascadeFactor = pow(2.0f, cascadeLevel);
        float projRays = 8.0f * cascadeFactor;
        float depthRays = floor(4.0f * cascadeFactor * 2.0f);
        float2 angleId;
        angleId.x = floor(coords.x * projRays * _CascadeBufferSize.z);
        angleId.y = fmod(floor((1.0f - (coords.y + 1) * _CascadeBufferSize.w) * depthRays), 4);

        directionVS = GetRayDirectionDFVS(angleId, cascadeLevel);
    }

    float2 probeMinMaxDepth = LOAD_TEXTURE2D_LOD(_MinMaxDepth, probeCenterCoord, depthLevel).xy;
    float2 probeMinMaxDepthLinear = LinearEyeDepth(probeMinMaxDepth, _ZBufferParams);
    float4 minMaxRadiance[2];
    minMaxRadiance[0] = float4(0.0f, 0.0f, 0.0f, 1.0f);
    minMaxRadiance[1] = float4(0.0f, 0.0f, 0.0f, 1.0f);
    int2 range = Ranges2[_CascadeLevel];

    // TODO: Make two rays simultaneously!
    for (int probeDepthId = 0; probeDepthId < 2; probeDepthId++)
    {
        if (probeMinMaxDepthLinear[probeDepthId] > 500.0f) // Probe is too far, skip it.
        {
            // NOTE: Skip probe that placed on skybox.
            minMaxRadiance[probeDepthId] = float4(0.0f, 0.0f, 0.0f, 1.0f);
            continue;
        }

        // Raytracing
        // TODO: Optimize math.
        float3 probeCenterWS = GetPositionWS(probeCenterUV, probeMinMaxDepth[probeDepthId]);
        float3 probeCenterVS = mul(_WorldToView, float4(probeCenterWS, 1)).xyz;
        
        // Calculate adaptive ray scale
        float adaptiveRayScale = GetAdaptiveRayScale(_CascadeLevel, probeCenterUV, _RayScale);
        
        float3 rayOriginVS = probeCenterVS + range.x * adaptiveRayScale * directionVS;
        float3 rayEndVS = probeCenterVS + range.y * adaptiveRayScale * directionVS;

        // TODO: Calculate proper ray steps count.
        // float stepsCount = clamp(length(rayOriginCS.xy - rayEndCS.xy), 1, 200);
        int stepsCount = 4 * (range.y - range.x);

        #if defined(SIMPLE_RAYCASTING)
        minMaxRadiance[probeDepthId] = TraceRay(rayOriginVS, rayEndVS, stepsCount, range);
        #else
        minMaxRadiance[probeDepthId] = TraceDepthRays(rayOriginVS, rayEndVS, stepsCount, range);
        #endif
    }

    if (_CascadeLevel < 5)
    {
        float radianceSectorSize = 0.25f / (1 << _CascadeLevel);
        float2x4 upperRadiances = LoadUpperRadianceBilateral(coords, probeMinMaxDepthLinear);

        float4 upperRadiance = upperRadiances[0] * radianceSectorSize;
        minMaxRadiance[0].rgb += upperRadiance.rgb * minMaxRadiance[0].a;
        minMaxRadiance[0].a *= saturate(upperRadiance.a);

        upperRadiance = upperRadiances[1] * radianceSectorSize;
        minMaxRadiance[1].rgb += upperRadiance.rgb * minMaxRadiance[1].a;
        minMaxRadiance[1].a *= saturate(upperRadiance.a);
    }

    _RadianceCascades[targetCoords] = minMaxRadiance[0]; // MinDepthProb
    _RadianceCascades[targetCoords + int2(_CascadeBufferSize.x / 2, 0)] = minMaxRadiance[1]; // MaxDepthProbe
}


[numthreads(8, 4, 1)]
void CombineSH(uint3 id : SV_DispatchThreadID)
{
    int2 coords = id.xy;

    int2 upperCascadeSize = _ProbesCount * 0.5f;
    int2 lowerProbeId = coords % _ProbesCount;
    // | c | d |
    // |___|___|
    // |[a]| b |
    // |___|___|
    int2 upperProbeLocalId = clamp(floor((lowerProbeId - 1) * 0.5f), 0, upperCascadeSize - 2);

    float2 bilinearWeights = saturate(fmod((lowerProbeId - 1) * 0.5f, 1.0f) + 0.25f);
    float4 weights = float4(bilinearWeights, 1.0f - bilinearWeights);
    weights = float4(
        weights.z * weights.w,
        weights.x * weights.w,
        weights.z * weights.y,
        weights.x * weights.y
    );

    float2 weightedMinMaxDepth = 0.0f;
    for (int i = 0; i < 4; i++)
    {
        int2 offset = int2(i % 2, i / 2);
        float2 minMaxDepth = LOAD_TEXTURE2D_LOD(_MinMaxDepth, upperProbeLocalId + offset, 2);
        weightedMinMaxDepth += minMaxDepth * weights[i];
    }
    weightedMinMaxDepth = LinearEyeDepth(weightedMinMaxDepth, _ZBufferParams);

    float2 minMaxDepth = LinearEyeDepth(LOAD_TEXTURE2D_LOD(_MinMaxDepth, coords, 1).xy, _ZBufferParams);
    float depthThickness = max(weightedMinMaxDepth.x - weightedMinMaxDepth.y, 0.001f);
    float depthOffset = saturate((weightedMinMaxDepth.x - minMaxDepth.x) / depthThickness);

    float4 sh0 = 0.0f;
    float4 sh1 = 0.0f;
    float4 sh2 = 0.0f;
    float4 sh3 = 0.0f;

    int2 upperCascadeCoords = upperProbeLocalId;
    upperCascadeCoords.y += upperCascadeSize.y * 7;
    
    for (int y = 0; y < 4; y++)
    {
        for (int x = 0; x < 4; x++)
        {
            // Sample radiance trilinear (uv, depth). 
            int2 upperCoords = upperCascadeCoords + int2(x, -y) * upperCascadeSize;
            float4 radianceMin = 0.0f;
            radianceMin += _RadianceCascades[upperCoords] * weights.x;
            radianceMin += _RadianceCascades[upperCoords + int2(1, 0)] * weights.y;
            radianceMin += _RadianceCascades[upperCoords + int2(0, 1)] * weights.z;
            radianceMin += _RadianceCascades[upperCoords + int2(1, 1)] * weights.w;

            upperCoords.x += 4 * upperCascadeSize.x;
            float4 radianceMax = 0.0f;
            radianceMax += _RadianceCascades[upperCoords] * weights.x;
            radianceMax += _RadianceCascades[upperCoords + int2(1, 0)] * weights.y;
            radianceMax += _RadianceCascades[upperCoords + int2(0, 1)] * weights.z;
            radianceMax += _RadianceCascades[upperCoords + int2(1, 1)] * weights.w;

            float4 radiance = lerp(radianceMin, radianceMax, depthOffset);

            float3 direction = GetRayDirectionDFWS(int2(x, y), 0);

            sh0 += radiance * kSHBasis0;
            sh1 += radiance * direction.x * kSHBasis1;
            sh2 += radiance * direction.y * kSHBasis1;
            sh3 += radiance * direction.z * kSHBasis1;
        }
    }

    _RadianceSH[coords + int2(0, 1) * _ProbesCount] = sh0;
    _RadianceSH[coords + int2(1, 1) * _ProbesCount] = sh1;
    _RadianceSH[coords + int2(0, 0) * _ProbesCount] = sh2;
    _RadianceSH[coords + int2(1, 0) * _ProbesCount] = sh3;
}
